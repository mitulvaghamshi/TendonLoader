def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}
def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}
def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}
def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}
//def keystoreProperties = new Properties()
//def keystorePropertiesFile = rootProject.file("keystore.properties")
//keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    namespace "me.mitul.tendon_loader"
    compileSdkVersion 33
    ndkVersion flutter.ndkVersion
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions.jvmTarget = '1.8'
    sourceSets.main.java.srcDirs += 'src/main/kotlin'
    defaultConfig {
        applicationId "me.mitul.tendon_loader"
        minSdk 29
        targetSdk 33
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        signingConfig signingConfigs.debug
        multiDexEnabled true
    }
    signingConfigs {
        release {
//            keyAlias keystoreProperties['keyAlias']
//            keyPassword keystoreProperties['keyPassword']
//            storeFile file(keystoreProperties['storeFile'])
//            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            shrinkResources true
            minifyEnabled true
        }
    }
//    splits {
//        abi {
//            enable true
//            reset()
//            include "arm64-v8a"
//            universalApk true
//        }
//        density {
//            enable true
//            exclude "ldpi", "xxhdpi", "xxxhdpi"
//            compatibleScreens 'small', 'normal', 'large', 'xlarge'
//        }
//    }
}
flutter {
    source '../..'
}
dependencies {
    implementation "androidx.multidex:multidex:2.0.1"
    implementation "com.google.firebase:firebase-bom:31.1.0"
}
