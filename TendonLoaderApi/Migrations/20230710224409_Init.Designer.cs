// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using TendonLoaderApi.Data;

#nullable disable

namespace TendonLoaderApi.Migrations;

[DbContext(typeof(TendonLoaderContext))]
[Migration("20230710224409_Init")]
partial class Init
{
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder.HasAnnotation("ProductVersion", "7.0.8");

        modelBuilder.Entity("TendonLoaderApi.Models.Exercise", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER")
                    .HasColumnName("id");

                b.Property<bool>("Completed")
                    .HasColumnType("INTEGER")
                    .HasColumnName("completed");

                b.Property<string>("Data")
                    .IsRequired()
                    .HasColumnType("TEXT")
                    .HasColumnName("data");

                b.Property<string>("Datetime")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("TEXT")
                    .HasColumnName("datetime");

                b.Property<double?>("MvcValue")
                    .HasColumnType("REAL")
                    .HasColumnName("mvc_value");

                b.Property<double>("PainScore")
                    .HasColumnType("REAL")
                    .HasColumnName("pain_score");

                b.Property<int?>("PrescriptionId")
                    .HasColumnType("INTEGER")
                    .HasColumnName("prescription_id");

                b.Property<string>("ProgressorId")
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnType("TEXT")
                    .HasColumnName("progressor_id");

                b.Property<string>("Tolerable")
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnType("TEXT")
                    .HasColumnName("tolerable");

                b.Property<int>("UserId")
                    .HasColumnType("INTEGER")
                    .HasColumnName("user_id");

                b.HasKey("Id");

                b.HasIndex("PrescriptionId")
                    .IsUnique();

                b.HasIndex("UserId");

                b.ToTable("Exercise");
            });

        modelBuilder.Entity("TendonLoaderApi.Models.Prescription", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER")
                    .HasColumnName("id");

                b.Property<int>("HoldTime")
                    .HasColumnType("INTEGER")
                    .HasColumnName("hold_time");

                b.Property<int>("MvcDuration")
                    .HasColumnType("INTEGER")
                    .HasColumnName("mvc_duration");

                b.Property<int>("Reps")
                    .HasColumnType("INTEGER")
                    .HasColumnName("reps");

                b.Property<int>("RestTime")
                    .HasColumnType("INTEGER")
                    .HasColumnName("rest_time");

                b.Property<int>("SetRest")
                    .HasColumnType("INTEGER")
                    .HasColumnName("set_rest");

                b.Property<int>("Sets")
                    .HasColumnType("INTEGER")
                    .HasColumnName("sets");

                b.Property<double>("TargetLoad")
                    .HasColumnType("REAL")
                    .HasColumnName("target_load");

                b.HasKey("Id");

                b.ToTable("Prescription");
            });

        modelBuilder.Entity("TendonLoaderApi.Models.Settings", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER")
                    .HasColumnName("id");

                b.Property<bool>("AutoUpload")
                    .HasColumnType("INTEGER")
                    .HasColumnName("auto_upload");

                b.Property<bool>("DarkMode")
                    .HasColumnType("INTEGER")
                    .HasColumnName("dark_mode");

                b.Property<bool>("EditablePrescriprion")
                    .HasColumnType("INTEGER")
                    .HasColumnName("editable_prescription");

                b.Property<double>("GraphScale")
                    .HasColumnType("REAL")
                    .HasColumnName("graph_scale");

                b.Property<int?>("PrescriptionId")
                    .HasColumnType("INTEGER")
                    .HasColumnName("prescription_id");

                b.Property<int>("UserId")
                    .HasColumnType("INTEGER")
                    .HasColumnName("user_id");

                b.HasKey("Id");

                b.HasIndex("PrescriptionId")
                    .IsUnique();

                b.HasIndex("UserId")
                    .IsUnique();

                b.ToTable("Settings");
            });

        modelBuilder.Entity("TendonLoaderApi.Models.User", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER")
                    .HasColumnName("id");

                b.Property<string>("Password")
                    .IsRequired()
                    .HasColumnType("TEXT")
                    .HasColumnName("password");

                b.Property<string>("Username")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("TEXT")
                    .HasColumnName("username");

                b.HasKey("Id");

                b.ToTable("User");
            });

        modelBuilder.Entity("TendonLoaderApi.Models.Exercise", b =>
            {
                b.HasOne("TendonLoaderApi.Models.Prescription", "Prescription")
                    .WithOne("Exercise")
                    .HasForeignKey("TendonLoaderApi.Models.Exercise", "PrescriptionId");

                b.HasOne("TendonLoaderApi.Models.User", "User")
                    .WithMany("Exercises")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Prescription");

                b.Navigation("User");
            });

        modelBuilder.Entity("TendonLoaderApi.Models.Settings", b =>
            {
                b.HasOne("TendonLoaderApi.Models.Prescription", "Prescription")
                    .WithOne("Settings")
                    .HasForeignKey("TendonLoaderApi.Models.Settings", "PrescriptionId");

                b.HasOne("TendonLoaderApi.Models.User", "User")
                    .WithOne("Settings")
                    .HasForeignKey("TendonLoaderApi.Models.Settings", "UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Prescription");

                b.Navigation("User");
            });

        modelBuilder.Entity("TendonLoaderApi.Models.Prescription", b =>
            {
                b.Navigation("Exercise")
                    .IsRequired();

                b.Navigation("Settings")
                    .IsRequired();
            });

        modelBuilder.Entity("TendonLoaderApi.Models.User", b =>
            {
                b.Navigation("Exercises");

                b.Navigation("Settings")
                    .IsRequired();
            });
#pragma warning restore 612, 618
    }
}
